(defun double-header (graf startl endl startv endv) ; l - buffer (traversed) v - visited
  (cond ((null startl) '())
        ((null endl) '())
        ((equal (car startl) (car endl)) (list (car startl)))
        (:else (let* ((new-startv (append startv (list (car startl))))
                     (new-endv (append endv (list (car endl))))
                     (new-startc (add-child graf (car startl) (append (cdr startl) new-startv))) ; c - children
                     (new-endc (add-child graf (car endl) (append (cdr endl) new-endv)))
                     (new-startl (append (cdr startl) new-startc))
                     (new-endl (append (cdr endl) new-endc)))
                 (let ((startpath (double-header graf new-startl endl new-startv endv))
                       (endpath (double-header graf startl new-endl startv new-endv)))
                   (cond ((or (null startpath) (null endpath)) '())
                         ((member (car startpath) new-startv) (if (member (car endpath) new-endv) 
                                                                  (cons (car startl) (append startpath endpath (list (car endl)))) 
                                                                (cons (car startl) (append startpath endpath))))
                         (:else (if (member (car endpath) new-endv)
                                (append startpath endpath (car endl))
                                (append startpath endpath)))))))))

(defun add-child (graf cvor cvorovi)
  (cond ((null graf) '())
        ((equal (caar graf) cvor) (novi-cvorovi (cadar graf) cvorovi))
        (:else (add-child (cdr graf) cvor cvorovi))))

(defun novi-cvorovi (potomci cvorovi)
  (cond ((null potomci) '())
        ((member (car potomci) cvorovi) (novi-cvorovi (cdr potomci) cvorovi))
        (:else (cons (car potomci) (novi-cvorovi (cdr potomci) cvorovi)))))